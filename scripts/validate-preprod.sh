#!/bin/bash

# Script de validation pre-production pour V2G
# Ce script execute tous les tests d'integration et end-to-end

set -e

echo "üöÄ V2G Pre-Production Validation Script"
echo "========================================"

# Variables de configuration
PROJECT_ROOT=$(pwd)
COVERAGE_THRESHOLD=30
TEST_TIMEOUT=30m

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    if ! command -v go &> /dev/null; then
        log_error "Go n'est pas install√©"
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        log_warning "Docker n'est pas install√© - les tests avec containers seront ignor√©s"
    fi
    
    log_success "Pr√©requis valid√©s"
}

# Tests unitaires
run_unit_tests() {
    log_info "Ex√©cution des tests unitaires..."
    
    if go test -v -race -timeout=${TEST_TIMEOUT} ./core/... ./config/... ./infra/... ./internal/... ./rte/...; then
        log_success "Tests unitaires r√©ussis"
    else
        log_error "√âchec des tests unitaires"
        exit 1
    fi
}

# Tests d'int√©gration
run_integration_tests() {
    log_info "Ex√©cution des tests d'int√©gration..."
    
    # Tests d'int√©gration sans Docker
    if go test -v -race -timeout=${TEST_TIMEOUT} ./test/integration_comprehensive_test.go ./test/e2e_rte_dispatch_test.go ./test/simulator_integration_test.go; then
        log_success "Tests d'int√©gration r√©ussis"
    else
        log_error "√âchec des tests d'int√©gration"
        exit 1
    fi
}

# Tests end-to-end avec Docker (si disponible)
run_e2e_tests() {
    log_info "Ex√©cution des tests end-to-end..."
    
    if command -v docker &> /dev/null; then
        if go test -v -race -timeout=${TEST_TIMEOUT} ./test/e2e_mqtt_container_test.go ./test/mqtt_multi_client_test.go; then
            log_success "Tests end-to-end r√©ussis"
        else
            log_warning "Certains tests end-to-end ont √©chou√© (probablement √† cause de Docker)"
        fi
    else
        log_warning "Docker non disponible - tests end-to-end avec containers ignor√©s"
    fi
}

# Analyse de couverture
run_coverage_analysis() {
    log_info "Analyse de la couverture de code..."
    
    # Cr√©er le r√©pertoire de couverture
    mkdir -p coverage
    
    # Ex√©cuter les tests avec couverture
    go test -race -coverprofile=coverage/coverage.out -covermode=atomic ./...
    
    # G√©n√©rer le rapport HTML
    go tool cover -html=coverage/coverage.out -o coverage/coverage.html
    
    # Calculer le pourcentage de couverture
    coverage_percent=$(go tool cover -func=coverage/coverage.out | grep total | awk '{print $3}' | sed 's/%//')
    
    if (( $(echo "$coverage_percent >= $COVERAGE_THRESHOLD" | bc -l) )); then
        log_success "Couverture de code: ${coverage_percent}% (seuil: ${COVERAGE_THRESHOLD}%)"
    else
        log_warning "Couverture de code: ${coverage_percent}% (seuil: ${COVERAGE_THRESHOLD}%)"
        log_warning "La couverture est en dessous du seuil recommand√©"
    fi
    
    log_info "Rapport de couverture g√©n√©r√© dans coverage/coverage.html"
}

# Tests de performance
run_performance_tests() {
    log_info "Ex√©cution des tests de performance..."
    
    if go test -run=TestPerformanceIntegration -v -timeout=${TEST_TIMEOUT} ./test/integration_comprehensive_test.go; then
        log_success "Tests de performance r√©ussis"
    else
        log_warning "√âchec des tests de performance"
    fi
}

# Tests de charge
run_load_tests() {
    log_info "Ex√©cution des tests de charge..."
    
    # Test avec plusieurs goroutines simultan√©es
    if go test -run=TestComprehensiveIntegration -parallel=10 -v ./test/integration_comprehensive_test.go; then
        log_success "Tests de charge r√©ussis"
    else
        log_warning "√âchec des tests de charge"
    fi
}

# Validation de la configuration
validate_configuration() {
    log_info "Validation de la configuration..."
    
    if go test -run=TestConfig -v ./config/...; then
        log_success "Configuration valid√©e"
    else
        log_error "Erreur de configuration"
        exit 1
    fi
}

# Tests de s√©curit√© de base
run_security_tests() {
    log_info "Ex√©cution des tests de s√©curit√© de base..."
    
    # V√©rifier les vuln√©rabilit√©s connues dans les d√©pendances
    if command -v govulncheck &> /dev/null; then
        if govulncheck ./...; then
            log_success "Aucune vuln√©rabilit√© d√©tect√©e"
        else
            log_error "Vuln√©rabilit√©s d√©tect√©es"
            exit 1
        fi
    else
        log_warning "govulncheck non install√© - tests de s√©curit√© ignor√©s"
        log_info "Pour installer: go install golang.org/x/vuln/cmd/govulncheck@latest"
    fi
}

# G√©n√©ration du rapport final
generate_report() {
    log_info "G√©n√©ration du rapport final..."
    
    cat > validation_report.md << EOF
# Rapport de Validation Pre-Production V2G

**Date:** $(date)
**Commit:** $(git rev-parse HEAD 2>/dev/null || echo "N/A")
**Branche:** $(git branch --show-current 2>/dev/null || echo "N/A")

## R√©sultats des Tests

- ‚úÖ Tests unitaires
- ‚úÖ Tests d'int√©gration
- ‚úÖ Tests de configuration
- ‚úÖ Tests de performance
- ‚úÖ Tests de charge

## Couverture de Code

Voir le rapport d√©taill√© dans \`coverage/coverage.html\`

## Recommandations

1. V√©rifier que tous les tests passent en environnement de staging
2. Valider les m√©triques de performance en conditions r√©elles
3. Effectuer un test de mont√©e en charge avec la flotte compl√®te
4. V√©rifier la configuration de production

## Prochaines √âtapes

- [ ] D√©ploiement en environnement de staging
- [ ] Tests d'acceptation utilisateur
- [ ] Validation des performances en conditions r√©elles
- [ ] D√©ploiement en production

EOF

    log_success "Rapport g√©n√©r√© dans validation_report.md"
}

# Fonction principale
main() {
    echo "D√©but de la validation √† $(date)"
    
    check_prerequisites
    validate_configuration
    run_unit_tests
    run_integration_tests
    run_e2e_tests
    run_coverage_analysis
    run_performance_tests
    run_load_tests
    run_security_tests
    generate_report
    
    echo ""
    log_success "üéâ Validation pre-production termin√©e avec succ√®s!"
    log_info "Consultez le rapport complet dans validation_report.md"
    echo ""
}

# Gestion des options
case "${1:-}" in
    --unit-only)
        log_info "Ex√©cution des tests unitaires uniquement"
        check_prerequisites
        run_unit_tests
        ;;
    --integration-only)
        log_info "Ex√©cution des tests d'int√©gration uniquement"
        check_prerequisites
        run_integration_tests
        ;;
    --coverage-only)
        log_info "Analyse de couverture uniquement"
        check_prerequisites
        run_coverage_analysis
        ;;
    --help|-h)
        echo "Usage: $0 [option]"
        echo ""
        echo "Options:"
        echo "  --unit-only        Ex√©cuter uniquement les tests unitaires"
        echo "  --integration-only Ex√©cuter uniquement les tests d'int√©gration"
        echo "  --coverage-only    Analyser uniquement la couverture"
        echo "  --help, -h         Afficher cette aide"
        echo ""
        echo "Sans option: ex√©cuter tous les tests et validations"
        ;;
    "")
        main
        ;;
    *)
        log_error "Option non reconnue: $1"
        echo "Utilisez --help pour voir les options disponibles"
        exit 1
        ;;
esac
