name: V2G Test Suite
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Tests automatiques tous les jours √† 6h
    - cron: '0 6 * * *'
env:
  GO_VERSION: '1.23'
  COVERAGE_THRESHOLD: 30
jobs:
  # Tests unitaires rapides
  unit-tests:
    name: Tests Unitaires
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod download
      - name: Run unit tests
        run: make test-unit
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: test-results/
  # Tests d'int√©gration
  integration-tests:
    name: Tests d'Int√©gration
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod download
      - name: Run integration tests
        run: make test-integration
      - name: Upload integration results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/
  # Tests end-to-end avec Docker
  e2e-tests:
    name: Tests End-to-End
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      mosquitto:
        image: eclipse-mosquitto:2.0
        ports:
          - 1883:1883
        options: >-
          --health-cmd "mosquitto_sub -t '$SYS/#' -C 1" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod download
      - name: Wait for MQTT
        run: |
          timeout 30 bash -c 'until nc -z localhost 1883; do sleep 1; done'
      - name: Run e2e tests
        run: make test-e2e
        env:
          MQTT_BROKER: localhost:1883
      - name: Upload e2e results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/
  # Tests de sc√©narios critiques
  critical-tests:
    name: Tests Critiques
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod download
      - name: Run critical scenario tests
        run: make test-critical
      - name: Upload critical test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: critical-test-results
          path: test-results/
  qa-scenarios:
    name: Sc√©narios QA
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod download
      - name: Run QA scenarios
        run: ./qa/run_scenarios.sh
      - name: Upload QA scenario results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qa-scenario-results
          path: test-results/
  # Analyse de couverture
  coverage:
    name: Analyse de Couverture
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod download
      - name: Generate coverage report
        run: make coverage
      - name: Check coverage threshold
        run: make coverage-check
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
  # Tests de performance
  performance:
    name: Tests de Performance
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod download
      - name: Run performance tests
        run: make test-performance
      - name: Run benchmarks
        run: make bench
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: bench-results/
  # Validation compl√®te pour pr√©production
  preproduction-validation:
    name: Validation Pr√©production
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, critical-tests, qa-scenarios, coverage, performance]
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod download
      - name: Install validation tools
        run: make install-tools
      - name: Run full validation
        run: ./scripts/validate-preprod.sh
      - name: Upload validation report
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: validation_report.md
      - name: Comment PR with validation results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('validation_report.md')) {
              const report = fs.readFileSync('validation_report.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## üéØ Rapport de Validation V2G\n\n' + report
              });
            }
  # Tests multi-plateforme
  cross-platform:
    name: Tests Multi-Plateforme
    strategy:
      matrix:
        os: [ubuntu-latest]
        go-version: ['1.23', '1.24']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      - name: Install dependencies
        run: go mod download
      - name: Run unit tests
        run: make test-unit
      - name: Build project
        run: make build
  # S√©curit√© et qualit√© du code
  security-and-quality:
    name: S√©curit√© et Qualit√©
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod download
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=10m
      - name: Install security tools
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
      - name: Run security scan
        run: make security
      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code not properly formatted:"
            gofmt -s -l .
            exit 1
          fi
  # Summary job pour les notifications
  test-summary:
    name: R√©sum√© des Tests
    if: always()
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, critical-tests, qa-scenarios, coverage, performance]
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ All V2G tests passed successfully!"
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå V2G tests failed. Check the logs for details."
